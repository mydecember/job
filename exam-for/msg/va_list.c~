#include   <stdio.h>         
#include   <stdarg.h> //va_list 
#include"errno.h"
#include <string.h>//strerror
#include"fcntl.h"
#ifndef __LOAD_DEBUG__
#define __LOAD_DEBUG__
#include"va_list.h"

//////////////////////////////////控制////////////////////

//定义输出阈值
int logleve=5;

//打开测试程序
//#define __TEST__MAIN__

//是否定义msg
//#define __MSG__DEBUG__

////////////////////////////////////////////////////////////////

 
//#define __DEBUG__



enum  msgflags { E=0x01, W=0x02, S=0x04, L=0x08,I=0x10 } ;
//int vpf(const char *fmt,char *file,char* func,int line, ...)
int vpf(  char *fmt,const char *function,const char *file,int line, ...)
{
	#ifndef __DEBUG__
	static FILE* fp=NULL;
	fp=fopen("./call_log.txt","ab+");
	#endif
	char *p=fmt;
	char buf[1024]={0};

va_list argptr;
int cnt;
va_start(argptr, line);
int err=-1;
int flags=0;
for ( p=fmt ; *p ; p++ )
     {
			 switch ( *p ) {
			      case ' ': p++ ; goto print ;
			      case 'E': flags |= E ; break ;
			      case 'W': flags |= W ; break ;
			      case 'S': flags |= S ; break ;
			      case 'I': flags |= I ; break ;
			     
			      default: 
							if ( isdigit ( *p ) ) {
							  err = *p - '0' ; 
							} else if ( ! isupper ( *p ) ) {
							  goto print ;
							}
			      }
			  }

  print:
if(flags&E)
{
	if(err==-1)
		err=1;
//	snprintf(buf,sizeof(buf),"ERROR:[%s][%s][%d]-->%s",file,function,line,p);
	snprintf(buf,sizeof(buf)-strlen(buf),"ERROR:");

}
 else if(flags&W)
{
	if(err==-1)
	err=2;
	//snprintf(buf,sizeof(buf),"WORNING:[%s][%s][%d]-->%s",file,function,line,p);
	strcpy(&buf[strlen(buf)],"WARNING:");
	
}else
{
	if(err==-1)
		err=5;
}
if(flags&I)
{
	snprintf(&buf[strlen(buf)],sizeof(buf)-strlen(buf),"[%s][%s][%d]",file,function,line);
}
if(flags&S)
{
	snprintf(&buf[strlen(buf)],sizeof(buf)-strlen(buf),"[%s]",strerror(errno));
}
if(flags)
	snprintf(&buf[strlen(buf)],sizeof(buf)-strlen(buf),"-->");
//snprintf(buf,sizeof(buf),"[%s][%s][%d][%s]\n%s",file,function,line,strerror(errno),p);
if(logleve>=err)
{
	snprintf(&buf[strlen(buf)],sizeof(buf)-strlen(buf),"%s",p);
	#ifdef __DEBUG__
	cnt = vfprintf(stderr,buf, argptr);
	#else
	cnt = vfprintf(fp,buf, argptr);
fclose(fp);
	#endif
}
va_end(argptr);

return(cnt);
}



#ifdef __TEST__MAIN__
int main(void)
{
int inumber = 30;
float fnumber = 90.0;
char *string = "abc";
msg("L%d %f %s\n",inumber,fnumber,string);
//open("sdg",O_RDWR);
msg("dfdsgsd\n");
msg("Eaaaa\n");
msg("Waaaa\n");
msg("WSaaaa\n");
msg("Saaaa\n");
msg("ES4nnnnnnnn\n");
msg("0kkkkkkkkkkkkk\n");
msg("IESmmmmmmmmmmm\n");
msg("dgsg");

return 0;
}
#endif
#endif //__LOAD_DEBUG__
